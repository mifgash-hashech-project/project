version: '3.7'

services:
  traefik:
    image: "traefik:v2.1"
    container_name: "traefik"
    command:
#      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=maor.levy2@mail.huji.ac.il"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  web:
    build:
      context: ..
      dockerfile: docker/node.Dockerfile
      args:
        SERVICE: web
    ports:
      - ${WEB_PORT}:${WEB_PORT}
  employees:
    build:
      context: ..
      dockerfile: docker/node.Dockerfile
      args:
        SERVICE: employees
    environment:
      - PORT=${EMPLOYEES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - ${EMPLOYEES_PORT}:${EMPLOYEES_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.employees-stripprefix.stripprefix.prefixes=/api/employees"
      - "traefik.http.routers.employees.middlewares=employees-stripprefix"
      - "traefik.http.routers.employees.rule=Host(`${APP_HOST}`) && PathPrefix(`/api/employees`)"
      - "traefik.http.services.employees.loadbalancer.server.port=${EMPLOYEES_PORT}"
  shifts:
    build:
      context: ..
      dockerfile: docker/node.Dockerfile
      args:
        SERVICE: shifts
    environment:
      - SCHEDULE_HOST=${SCHEDULE_HOST}
      - SCHEDULE_PORT=${SCHEDULE_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - ${SHIFTS_PORT}:${SHIFTS_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.shifts-stripprefix.stripprefix.prefixes=/api/shifts"
      - "traefik.http.routers.shifts.middlewares=shifts-stripprefix"
      - "traefik.http.routers.shifts.rule=Host(`${APP_HOST}`) && PathPrefix(`/api/shifts`)"
      - "traefik.http.services.shifts.loadbalancer.server.port=${SHIFTS_PORT}"
  usage:
    build:
      context: ..
      dockerfile: docker/node.Dockerfile
      args:
        SERVICE: usage
    environment:
      - PORT=${USAGE_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - ${USAGE_PORT}:${USAGE_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.usage-stripprefix.stripprefix.prefixes=/api/usage"
      - "traefik.http.routers.usage.middlewares=shifts-stripprefix"
      - "traefik.http.routers.usage.rule=Host(`${APP_HOST}`) && PathPrefix(`/api/usage`)"
      - "traefik.http.services.usage.loadbalancer.server.port=${USAGE_PORT}"
    restart: always
    depends_on:
      - postgres
  schedule:
    build:
      context: ..
      dockerfile: docker/python.Dockerfile
      args:
        SERVICE: schedule
    platform: linux/amd64
    environment:
      - HOST=${SCHEDULE_HOST}
      - PORT=${SCHEDULE_PORT}
    ports:
      - ${SCHEDULE_PORT}:${SCHEDULE_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.schedule-stripprefix.stripprefix.prefixes=/api/schedule"
      - "traefik.http.routers.schedule.middlewares=schedule-stripprefix"
      - "traefik.http.routers.schedule.rule=Host(`${APP_HOST}`) && PathPrefix(`/api/schedule`)"
      - "traefik.http.services.schedule.loadbalancer.server.port=${SCHEDULE_PORT}"
  auth:
    build:
      context: ..
      dockerfile: docker/node.Dockerfile
      args:
        SERVICE: auth
    environment:
      PORT: ${AUTH_PORT}
      EMPLOYEES_PORT: ${EMPLOYEES_PORT}
      EMPLOYEES_HOST: ${EMPLOYEES_HOST}
      MONGODB_HOST: mongo
      MONGODB_PORT: ${MONGODB_PORT}
      MONGODB_COLLECTION: users
      MONGO_INITDB_ROOT_USERNAME: master
      MONGO_INITDB_ROOT_PASSWORD: password
      JWT_SECRET: "ThisIsMySecret123!"
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.auth-stripprefix.stripprefix.prefixes=/api/auth"
      - "traefik.http.routers.auth.middlewares=auth-stripprefix"
      - "traefik.http.routers.auth.rule=Host(`${APP_HOST}`) && PathPrefix(`/api/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=${AUTH_PORT}"
  mongo:
    image: mongo:4
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: master
      MONGO_INITDB_ROOT_PASSWORD: password
  postgres:
    image: postgres:12
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}